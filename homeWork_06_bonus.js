// 1) Сначала без запуска подцумайте какой будет порядок вывода в консоль
// 2) Скопируйте и запустите код в любой консоли
// 3) А дальше прикрипите к дз подробное обьяснение по шагам о работе эвент лупа в этом коде и собственно объяснение почему выведеться именно в таком порядке

Promise.resolve()
  .then(() => console.log("a: 1")) 
  .then(() => {
    setTimeout(() => console.log("timeout 2")); 
    console.log("a: 2"); 
  })
  .then(() => {
    setTimeout(() => console.log("timeout 3"));
    console.log("a: 3");  
  });


new Promise((res, rej) => {
  console.log("b"); 
  rej(new Error("123"));
})
  .then(console.log("b 1"))
  .then(
    () => console.log("b 2"),
    () => console.log("b")
  )
  .catch(() => console.log("b 3"))
  .then(() => console.log("b 4"));

// b  b 1  a:1  a:2  b  a:3  b 4  timeout 2  timeout 3
//схематичное представление работы event loop в файле Eventloop.png
// 1)
// - на 5 и 17 строчке создаются два промиса разными способами;

// - в первую очередь выполняется синхронный код:
//// на 18 строчке обычная синхронная функция - попадает в коллстек -
// в консоль выводится 'b' - тут же из коллстека удаляется;
//// на 21 строчке также обычная синхронная функция - попадает в коллстек -
// в консоль выводится 'b1' - тут же из коллстека удаляется;

// - коллстек пуст;

// 2)
// - на очереди выполнение микротасок - выполнении ассинхронных операций;

// - так как первый промис выполнился успешно - выполняется then на 6той строчке -
// регистрируется задача в микротаксах - () => console.log("a: 1") - выводится "а: 1" (выполнение происходит в коллстеке);

// - далее обрабатывается then на 7той строчке - колбек попадает в очередь микротасок: 
//// оттуда setTimeout() идет в WEB API - далее () => console.log("timeout 2") регистрируется в очереди макротасок(первым) - ничего не выводится;
//// console.log("a: 2") - выполняется в коллстеке - выводится "а: 2" - из коллстека удаляется;

// - так как промисы выполняются асинхронно, то далее обрабатывается then на 22ой строчке:
// - промис выполнен с ошибкой - попадая в then он ищет второй аргумент для обработки ошибки =>
// () => console.log("b") попадает в очередь микротасок - выполняется в коллстеке - выводится "b";

// - далее обрабатывается then на 11той строчке - колбек попадает в очередь микротасок: 
//// оттуда setTimeout() идет в WEB API - далее () => console.log("timeout 3") регистрируется в очереди макротасок(вторым) - ничего не выводится;
//// console.log("a: 3") - выполняется в коллстеке - выводится "а: 3" - из коллстека удаляется;

// - поскольку ошибка второго промиса уже обработалась, catch на 26ой строчке не выполняется;

// - далее обрабатывается then на 27ой строчке - функция () => console.log("b 4") попадает в очередь микротасок - выполняется в коллстеке - выводится b 4;

// - очередь микротасок пуста.

// 3)
// на очереди выполнение макротасок:
//  - выполняется console.log("timeout 2") - выводится "timeout 2";
//  - выполняется console.log("timeout 3") - выводится "timeout 3";

//ура :)
